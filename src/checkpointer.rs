use crate::writer::OutputWriter;
use eyre::Result;
use serde::Serialize;
use std::io;
use std::io::Write;

pub struct Checkpointer<'a, T: OutputWriter> {
    writer: &'a T,
}

impl<'a, T> Checkpointer<'a, T> {
    pub(crate) fn new(writer: &T) -> Self {
        Self { writer }
    }

    /// Checkpoints at a particular sequence number you provide or if no sequence number is given, the checkpoint will
    /// be at the end of the most recently delivered list of records.
    ///
    /// # Arguments
    ///
    /// * `sequence_number`: the sequence number to checkpoint
    /// * `sub_sequence_number`: the sub sequence number generated by KPL
    ///
    /// returns: Result<(), Report>
    ///
    pub fn checkpoint(
        sequence_number: Option<String>,
        sub_sequence_number: Option<u64>,
    ) -> Result<()> {
        let message = CheckpointMessage {
            action: "checkpoint".to_string(),
            sequence_number,
            sub_sequence_number,
        };
        let mut out = io::stdout();
        let mut payload = serde_json::to_vec(&message)?;
        payload.push(b'\n');
        out.write_all(payload.as_slice())?;
        out.flush()?;

        Ok(())
    }
}

#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
struct CheckpointMessage {
    action: String,
    sequence_number: Option<String>,
    sub_sequence_number: Option<u64>,
}
